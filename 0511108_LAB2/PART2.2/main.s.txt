.syntax unified
.cpu cortex-m4
.thumb

.data
    Leds: .byte 0

.text
    .global main
    .equ mini_sec,  0x96     // 150
    .include "../src/pin.s"  // import GPIO constants

Delay:
    PUSH {r0, lr}
    ldr r0, =mini_sec     // Use to control total delay time
Delay_loop:
    subs r0, r0, #1       // 1 cycle
    bne Delay_loop        // 1~3 cycle
    POP {r0, pc}

// r0 = value
DisplayLED:
    PUSH {r1, r2, lr}
    ldr r1, =GPIOC_ODR
    ldr r2, [r1]          // Get Current Output
    and r2, #0xFFFFFFC3   // Clear PC2 to PC5
    eor r0, #0xFFFFFFFF   // Reverse r0 (Active Low)
    and r0, #0x3C         // Select the needed bits
    orr r2, r0            // Set the output bits
    str r2, [r1]          // Write back to Output Reg
    POP {r1, r2, pc}

GPIO_init:
    // Enable AHB2 clock
    movs r0, #0x6
    ldr r1, =RCC_AHB2ENR
    str r0, [r1]
    // Set PC2-PC5 to output mode
    ldr r1, =GPIOC_MODER
    ldr r0, [r1]
    and r0, #0xFFFFF00F
    orr r0, #0x550
    str r0, [r1]
    // Set PC2-PC5  to high speed
    ldr r1, =GPIOC_OSPEEDR
    ldr r0, [r1]
    and r0, 0xFFFFF00F
    orr r0, #0xAA0
    str r0, [r1]
    // Set PC2-PC5  to pullup
    ldr r1, =GPIOC_PUPDR
    ldr r0, [r1]
    and r0, 0xFFFFF00F
    orr r0, #0x550
    str r0, [r1]
    // Set PC13 to input mode
    ldr r1, =GPIOC_MODER
    ldr r0, [r1]
    and r0, #0xF3FFFFFF
    orr r0, #0x0
    str r0, [r1]
    bx lr

// r5 = Leds Address
Loop:
    ldrb r0, [r5]        // Load Leds into r0
    and r0, r0, #0x1E    // Get the center 4 bits
    bl DisplayLED        // Branch to change led display

main:
    bl GPIO_init    // Setup GPIO
    movs r0, #0x4  // write 0b'001000 to Leds
    ldr r5, =Leds   // r5 = Leds addr
    strb r0, [r5]
    b Loop

L: b L

